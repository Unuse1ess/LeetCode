#
# @lc app=leetcode.cn id=36 lang=python3
#
# [36] 有效的数独
#
from typing import *

# @lc code=start
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        for i in range(9):
            row = [0 for _ in range(9)]
            col = [0 for _ in range(9)]
            if i % 3 == 0:
                nbn = [[0 for _ in range(9)] for _ in range(3)]

            for j in range(9):
                if board[i][j] != '.':
                    n = int(board[i][j]) - 1
                    row[n] += 1
                    nbn[j // 3][n] += 1
                    if row[n] > 1 or nbn[j // 3][n] > 1:
                        return False

                if board[j][i] != '.':
                    n = int(board[j][i]) - 1
                    col[n] += 1
                    if col[n] > 1:
                        return False
        return True
                
# @lc code=end

s = Solution()
board = \
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]

print(s.isValidSudoku(board))

board = \
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]

print(s.isValidSudoku(board))
